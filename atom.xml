<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://AnCIity.github.io</id>
    <title>AnBlog</title>
    <updated>2019-10-31T07:11:00.252Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://AnCIity.github.io"/>
    <link rel="self" href="https://AnCIity.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://AnCIity.github.io/images/avatar.png</logo>
    <icon>https://AnCIity.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, AnBlog</rights>
    <entry>
        <title type="html"><![CDATA[Git - 简要指南]]></title>
        <id>https://AnCIity.github.io/post/git-brief</id>
        <link href="https://AnCIity.github.io/post/git-brief">
        </link>
        <updated>2019-10-31T07:05:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="git-简要指南">Git - 简要指南</h1>
<hr>
<blockquote>
<p>参数：</p>
<ul>
<li><strong>username:</strong>    用户名</li>
<li><strong>email:</strong>    邮箱</li>
<li><strong>repo:</strong>    Git 仓库</li>
<li><strong>branch:</strong>    分支</li>
<li><strong>directory:</strong>    本地目录</li>
<li><strong>filename:</strong>    文件名</li>
</ul>
</blockquote>
<h3 id="创建新仓库">创建新仓库</h3>
<blockquote>
<p>创建新文件夹并打开</p>
</blockquote>
<pre><code class="language-shell">git init
</code></pre>
<h3 id="配置仓库">配置仓库</h3>
<blockquote>
<p>全局设置（已配置忽略）</p>
</blockquote>
<pre><code class="language-shell">git config --global user.name '&lt;username&gt;'
git config --global user.email '&lt;email&gt;'
</code></pre>
<blockquote>
<p>关联远程仓库</p>
</blockquote>
<pre><code class="language-shell">git remote add origin &lt;repo&gt;
</code></pre>
<blockquote>
<p>删除关联仓库</p>
</blockquote>
<pre><code class="language-shell">git remote remove origin
</code></pre>
<h3 id="检出仓库">检出仓库</h3>
<blockquote>
<p>执行如下命令以创建一个本地仓库的克隆版本：</p>
</blockquote>
<pre><code class="language-shell">git clone &lt;directory&gt;
</code></pre>
<blockquote>
<p>如果是远端服务器上的仓库，你的命令会是这个样子：</p>
</blockquote>
<pre><code class="language-shell">git clone &lt;repo&gt;
</code></pre>
<h3 id="工作流">工作流</h3>
<blockquote>
<p><code>工作区</code>：是你的工作目录，它持有实际文件</p>
<p><code>暂存区（Index）</code>：它像个缓存区域，临时保存你的改动</p>
<p><code>HEAD</code>：它指向你最后一次提交的结果</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://AnCIity.github.io/post-images/1572505828915.jpg" alt=""></figure>
<h3 id="添加和提交">添加和提交</h3>
<blockquote>
<p>添加到暂存区<code>index</code></p>
</blockquote>
<pre><code class="language-shell">git add &lt;filename&gt;
git add *
</code></pre>
<blockquote>
<p>提交改动至本地仓库<code>HEAD</code></p>
</blockquote>
<pre><code class="language-shell">git commit -m &quot;代码提交信息&quot;
</code></pre>
<h3 id="推送改动">推送改动</h3>
<blockquote>
<p>提交到远程仓库</p>
</blockquote>
<pre><code class="language-shell">git push origin &lt;branch&gt;
</code></pre>
<blockquote>
<p>项目已存在</p>
<p>需先获取远程库与本地同步合并</p>
</blockquote>
<pre><code class="language-shell">git pull --rebase origin &lt;branch&gt;
</code></pre>
<h3 id="分支">分支</h3>
<blockquote>
<p>创建分支</p>
</blockquote>
<pre><code class="language-shell">git branch
</code></pre>
<blockquote>
<p>删除分支</p>
</blockquote>
<pre><code class="language-shell">git branch -d &lt;branch&gt;
</code></pre>
<blockquote>
<p>查看分支</p>
</blockquote>
<pre><code class="language-shell">git branch # 本地
git branch -r # 远程
git branch -a # 所有
</code></pre>
<blockquote>
<p>切换分支</p>
</blockquote>
<pre><code class="language-shell">git checkout &lt;branch&gt;
</code></pre>
<blockquote>
<p>推送分支</p>
</blockquote>
<pre><code class="language-shell">git push origin &lt;branch&gt;
</code></pre>
<h3 id="更新与合并">更新与合并</h3>
<blockquote>
<p>更新本地仓库至最新改动</p>
</blockquote>
<pre><code class="language-shell">git pull
</code></pre>
<blockquote>
<p>获取远程库与本地同步合并</p>
</blockquote>
<pre><code class="language-shell">git pull --rebase origin &lt;branch&gt;
</code></pre>
<blockquote>
<p>合并其他分支到你的当前分支</p>
</blockquote>
<pre><code class="language-shell">git merge &lt;branch&gt;
</code></pre>
<blockquote>
<p>手动合并冲突</p>
</blockquote>
<pre><code class="language-shell">git add &lt;filename&gt;
</code></pre>
<blockquote>
<p>预览差异</p>
</blockquote>
<pre><code class="language-shell">git diff &lt;source_branch&gt; &lt;target_branch&gt; # 原分支 目标分支
</code></pre>
<h3 id="实用小贴士">实用小贴士</h3>
<blockquote>
<p>内建的图形化 Git</p>
</blockquote>
<pre><code class="language-shell">gitk
</code></pre>
<blockquote>
<p>彩色的 git 输出</p>
</blockquote>
<pre><code class="language-shell">git config color.ui true
</code></pre>
<blockquote>
<p>显示历史记录时，每个提交的信息只显示一行</p>
</blockquote>
<pre><code class="language-shell">git config format.pretty oneline
</code></pre>
<blockquote>
<p>交互式添加文件到暂存区</p>
</blockquote>
<pre><code class="language-shell">git add -i
</code></pre>
<h3 id="常用命令速查表">常用命令速查表</h3>
<figure data-type="image" tabindex="2"><img src="https://AnCIity.github.io/post-images/1572505842313.png" alt=""></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue - Api接口模块化]]></title>
        <id>https://AnCIity.github.io/post/vue-api-module</id>
        <link href="https://AnCIity.github.io/post/vue-api-module">
        </link>
        <updated>2019-10-31T05:53:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="文件介绍">文件介绍</h3>
<p>了解并新建以下目录文件</p>
<blockquote>
<p><code>@apis</code> api管理文件夹</p>
<p><code>@apis/index.js</code> api接口的通一出口</p>
<p><code>@apis/base.js</code> 接口域名管理</p>
<p><code>@apis/xxx.js</code> 更多接口模块</p>
<p><code>@apis/filing.js</code> 示例接口模块 用于定义filing模块接口列表</p>
</blockquote>
<h3 id="index">index</h3>
<pre><code class="language-js">/**
* @author City
* @description api接口的通一出口
*/

//  导出接口
//  归档模块接口
import filing from '@/apis/filing'



//  导出接口
export default{
    filing
}
</code></pre>
<h3 id="base">base</h3>
<pre><code class="language-js">/**
 * @author City
 * @description 接口域名管理
 */


const base = {
    anLink: '/api'
}


 export default base;
</code></pre>
<h3 id="filing">filing</h3>
<pre><code class="language-js">/**
* @author City
* @description filing模块接口列表
*/

import base from './base'; // 导入接口域名列表
import axios from '@/utils/http' // 导入http中创建的axios实例
import qs from 'qs' // 根据需求导入qs模块，序列化post数据

const filing = {
    // 归档菜单
    Menu () {
        return axios.get(`${base.anLink}/menu`);
    },
    // 归档列表
    List () {
        return axios.get(`${base.anLink}/list`)
    }
    // 新闻详情,演示    
    // articleDetail (id, params) {        
    //     return axios.get(`${base.sq}/topic/${id}`, {            
    //         params: params        
    //     });    
    // },
    // // post提交    
    // login (params) {        
    //     return axios.post(`${base.sq}/accesstoken`, qs.stringify(params));    
    // }

}


export default filing;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue - 封装axios]]></title>
        <id>https://AnCIity.github.io/post/vue-package-axios</id>
        <link href="https://AnCIity.github.io/post/vue-package-axios">
        </link>
        <updated>2019-10-26T13:17:23.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>新建目录文件：</p>
<p>@/utils/http.js</p>
</blockquote>
<pre><code class="language-js">/**
* @author City
* @description axios封装，请求拦截、响应拦截、错误统一处理
*/

import axios from 'axios';

// 创建axios实例
const instance = axios.create();
// 设置post请求头
instance.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';


// 添加请求拦截器
axios.interceptors.request.use(function (config) {
    // 在发送请求之前做些什么
    return config;
  }, function (error) {
    // 对请求错误做些什么
    return Promise.reject(error);
  });


// 添加响应拦截器
axios.interceptors.response.use(function (response) {
    // 对响应数据做点什么
    return response;
  }, function (error) {
    // 对响应错误做点什么
    return Promise.reject(error);
  });


export default instance;
</code></pre>
]]></content>
    </entry>
</feed>