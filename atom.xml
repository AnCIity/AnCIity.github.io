<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://AnCIity.github.io</id>
    <title>AnBlog</title>
    <updated>2019-11-01T16:22:26.576Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://AnCIity.github.io"/>
    <link rel="self" href="https://AnCIity.github.io/atom.xml"/>
    <subtitle>学以致用。</subtitle>
    <logo>https://AnCIity.github.io/images/avatar.png</logo>
    <icon>https://AnCIity.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, AnBlog</rights>
    <entry>
        <title type="html"><![CDATA[ES6 - 初识]]></title>
        <id>https://AnCIity.github.io/post/es6-acquaintance</id>
        <link href="https://AnCIity.github.io/post/es6-acquaintance">
        </link>
        <updated>2019-11-01T08:52:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="变量">变量</h3>
<p><strong>let</strong>：块级作用域</p>
<p><strong>const</strong>：声明常量，必须赋一个初始值，不可改变，不可重复声明</p>
<h3 id="引入方式">引入方式</h3>
<blockquote>
<p>import require export</p>
</blockquote>
<h6 id="遵循规范">遵循规范</h6>
<ul>
<li><strong>require</strong> 是 AMD规范引入方式</li>
<li><strong>import</strong>是es6的一个语法标准，如果要兼容浏览器的话必须转化成es5的语法</li>
</ul>
<h6 id="调用时间">调用时间：</h6>
<p><strong>import</strong>：编译时调用，必须放在文件开头</p>
<p><strong>require</strong>：运行时调用，理论上可以运用在代码任何地方</p>
<h6 id="本质">本质：</h6>
<p><strong>import</strong>：解构过程，但是目前所有的引擎都还没有实现import，我们在node中使用babel支持ES6，也仅仅是将ES6转码为ES5再执行，import语法会被转码为require</p>
<p><strong>require</strong>：赋值过程，require的结果就是对象，数字，字符串，函数等，再把require的结果赋值给某个变量</p>
<p>export 与 import相对应 导出 导入</p>
<h3 id="箭头函数">箭头函数</h3>
<p>arrow function</p>
<pre><code class="language-js">function(i){ return i + 1; } //ES5
let funname = i =&gt; i + 1; //ES6一个参数一句代码简写
let funname = (a, b) =&gt; a + b;// 如果只有一句代码并为return，可省略return
let funname = (x, y) =&gt; {x++; y--; return x+y}; //ES6
</code></pre>
<h3 id="字符串嵌入">字符串嵌入</h3>
<p>template string</p>
<pre><code class="language-js">let name  = &quot;tony&quot;;
let str1 = &quot;hello,${name}!&quot;
let str2 = `hello,${name}!`
</code></pre>
<h3 id="构造函数">构造函数</h3>
<blockquote>
<p>constructor</p>
</blockquote>
<pre><code class="language-javascript">constructor(name,age){
            this.name = name;
            this.age = age;
        }
</code></pre>
<h3 id="对象">对象</h3>
<pre><code class="language-javascript">let foo =&quot;tony&quot;
    const obj = {
        foo: foo,// 同名可简写为：foo,
        bar:function () {// 可简写为：bar(){}
            console.log(this.foo)
        }
    }
    console.log(obj.bar())
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue - 配置less环境]]></title>
        <id>https://AnCIity.github.io/post/vue-less-environment</id>
        <link href="https://AnCIity.github.io/post/vue-less-environment">
        </link>
        <updated>2019-11-01T07:58:00.000Z</updated>
        <content type="html"><![CDATA[<h5 id="安装less">安装Less</h5>
<pre><code class="language-shell">npm i less less-loader -S 
</code></pre>
<p>注意：独立的vue文件需要引入less</p>
<pre><code class="language-css">&lt;style lang=&quot;less&quot;&gt;&lt;/style&gt;
</code></pre>
<h5 id="配置全局变量">配置全局变量</h5>
<blockquote>
<p>Vue-cli3X<br>
vue.config.js</p>
</blockquote>
<pre><code class="language-js">const path = require('path');
module.exports = {
    pluginOptions: {
        'style-resources-loader': {
            preProcessor: 'less',
            patterns: [
                //这个是加上自己的路径，
                //注意：试过不能使用别名路径
                path.resolve(__dirname, 'src/assets/css/theme.less'),
            ]
        }
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vuex - 概论]]></title>
        <id>https://AnCIity.github.io/post/vue-vuex-generality</id>
        <link href="https://AnCIity.github.io/post/vue-vuex-generality">
        </link>
        <updated>2019-11-01T07:55:09.000Z</updated>
        <content type="html"><![CDATA[<h2 id="vuex-概论">Vuex - 概论</h2>
<h3 id="核心概念">核心概念</h3>
<hr>
<h4 id="state"><strong>State</strong></h4>
<blockquote>
<p>数据仓库</p>
</blockquote>
<h4 id="getter"><strong>Getter</strong></h4>
<blockquote>
<p>获取仓库数据</p>
</blockquote>
<h4 id="mutation"><strong>Mutation</strong></h4>
<blockquote>
<p>定义变化</p>
</blockquote>
<ul>
<li>定义变化，处理状态（数据）的改变</li>
</ul>
<h4 id="action"><strong>Action</strong></h4>
<blockquote>
<p>使用 <strong>commit</strong> 提交 Mutation 定义的变化</p>
<p><strong>commit</strong> ：</p>
<blockquote>
<p>提交变化，修改数据的唯一方式就是显示的提交 mutations</p>
</blockquote>
</blockquote>
<ul>
<li>定义方法（动作）,可以使异步的发送请求。</li>
</ul>
<h4 id="module"><strong>Module</strong></h4>
<blockquote>
<p>模块化</p>
</blockquote>
<h3 id="工作流程">工作流程</h3>
<hr>
<figure data-type="image" tabindex="1"><img src="https://AnCIity.github.io/post-images/1572597146141.png" alt=""></figure>
<ol>
<li>在vue组件里面，通过<strong>dispatch</strong>来触发<strong>actions</strong>提交修改数据的操作。</li>
<li>然后再通过<strong>actions</strong>的<strong>commit</strong>来触发<strong>mutations</strong>来修改数据。</li>
<li><strong>mutations</strong>接收到<strong>commit</strong>的请求，就会自动通过<strong>Mutate</strong>来修改<strong>state</strong>（数据中心里面的数据状态）里面的数据。</li>
<li>最后由<strong>store</strong>触发每一个调用它的组件的更新。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue - 配置跨域请求]]></title>
        <id>https://AnCIity.github.io/post/vue-pei-zhi-kua-yu-qing-qiu</id>
        <link href="https://AnCIity.github.io/post/vue-pei-zhi-kua-yu-qing-qiu">
        </link>
        <updated>2019-11-01T06:19:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="vue-配置跨域请求">Vue - 配置跨域请求</h3>
<blockquote>
<p>示例API：http://127.0.0.1:5000/api/menu</p>
</blockquote>
<h5 id="配置">配置</h5>
<blockquote>
<p>package.json同级目录下vue.config.js新建</p>
</blockquote>
<pre><code class="language-js">//axios域代理，解决axios跨域问题
devServer: {
    proxy: {
        '': {
            target: 'http://127.0.0.1:5000',
            changeOrigin: true,
            ws: true,
            pathRewrite: {}
        }
    }
}
</code></pre>
<h5 id="调用">调用</h5>
<pre><code class="language-js">this.$http
.get('/api/menu')
.then(response =&gt; (this.Fi_sorts = response.data.Fi_sorts))
.catch(function (error) { // 请求失败处理
	console.log(error);
});
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue - 实例常用属性]]></title>
        <id>https://AnCIity.github.io/post/vue-attr</id>
        <link href="https://AnCIity.github.io/post/vue-attr">
        </link>
        <updated>2019-11-01T06:16:54.000Z</updated>
        <content type="html"><![CDATA[<h2 id="vue-实例常用属性">Vue - 实例常用属性</h2>
<h3 id="数据">数据</h3>
<hr>
<p><strong>data</strong></p>
<blockquote>
<p>数据对象</p>
</blockquote>
<ul>
<li>用来组织从view中抽象出来的属性，可以说将视图的数据抽象出来存放在data中。</li>
</ul>
<p><strong>components</strong></p>
<blockquote>
<p>注册组件</p>
</blockquote>
<h3 id="组件">组件</h3>
<hr>
<p><strong>props</strong></p>
<blockquote>
<p>数据传递</p>
</blockquote>
<ul>
<li>用于接收来自父组件的数据</li>
</ul>
<p><strong>template</strong></p>
<blockquote>
<p>组件模板</p>
</blockquote>
<ul>
<li>用来设置模板，会替换页面元素，包括占位符。</li>
</ul>
<p>###类方法</p>
<hr>
<p><strong>methods</strong></p>
<blockquote>
<p>实例方法</p>
</blockquote>
<ul>
<li>放置页面中的业务逻辑，js方法一般都放置在methods中</li>
<li>methods方式在使用时要像方法一样去用，必须加()</li>
<li>methods方式是每次进入页面都要执行该方法，但是在利用实时信息时，比如显示当前进入页面的时间，必须用methods方式</li>
</ul>
<p><strong>computed</strong></p>
<blockquote>
<p>计算属性</p>
</blockquote>
<ul>
<li>用来计算</li>
<li>computed计算属性的方式在用属性时不用加()</li>
<li>computed计算属性是将方法与数据绑定，只有当数据发生变化时才会触发方法</li>
</ul>
<p><strong>watch</strong></p>
<blockquote>
<p>侦听属性</p>
</blockquote>
<ul>
<li>watch:function(new,old){}</li>
<li>监听data中数据的变化</li>
<li>两个参数，一个返回新值，一个返回旧值，</li>
</ul>
<p><strong>filters</strong></p>
<blockquote>
<p>过滤器</p>
</blockquote>
<p><strong>render</strong></p>
<blockquote>
<p>渲染函数，创建虚拟DOM</p>
</blockquote>
<h3 id="生命周期">生命周期</h3>
<hr>
<p><strong>created</strong></p>
<blockquote>
<p>初始化</p>
</blockquote>
<ul>
<li>在实例创建完成后被立即调用，完成初始化操作</li>
</ul>
<p><strong>mounted</strong></p>
<blockquote>
<p>挂载后</p>
</blockquote>
<ul>
<li>el挂载到Vue实例上了，开始业务逻辑操作</li>
</ul>
<p><strong>beforeDestroy</strong></p>
<blockquote>
<p>销毁前</p>
</blockquote>
<ul>
<li>实例销毁之前调用</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git - 推送已有项目到远程仓库]]></title>
        <id>https://AnCIity.github.io/post/git-tui-song-yi-you-xiang-mu-dao-yuan-cheng-cang-ku</id>
        <link href="https://AnCIity.github.io/post/git-tui-song-yi-you-xiang-mu-dao-yuan-cheng-cang-ku">
        </link>
        <updated>2019-10-31T07:20:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="git-推送已有项目到远程仓库">Git - 推送已有项目到远程仓库</h2>
<blockquote>
<p>提示：</p>
<p>在GitHub中新建好仓库</p>
</blockquote>
<blockquote>
<p>配置用户信息（已配置过，则忽略）</p>
</blockquote>
<pre><code class="language-shell">git config --global user.name 'AnCIity'
git config --global user.email 'city@nanzc.com'
</code></pre>
<blockquote>
<p>初始化git</p>
</blockquote>
<pre><code class="language-shell">git init
</code></pre>
<blockquote>
<p>关联网络仓库</p>
</blockquote>
<pre><code class="language-shell">git remote add origin &lt;新建的仓库地址&gt;
</code></pre>
<blockquote>
<p>添加到暂存区</p>
</blockquote>
<pre><code class="language-shell">git add .
</code></pre>
<blockquote>
<p>把文件提交到仓库，引号内为提交说明</p>
</blockquote>
<pre><code class="language-shell">git commit -m ''
</code></pre>
<blockquote>
<p>获取远程库与本地同步合并</p>
</blockquote>
<pre><code class="language-shell">git pull --rebase origin master
</code></pre>
<blockquote>
<p>推送到远程仓库</p>
</blockquote>
<pre><code class="language-shell">git push -u origin master
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git - 简要指南]]></title>
        <id>https://AnCIity.github.io/post/git-brief</id>
        <link href="https://AnCIity.github.io/post/git-brief">
        </link>
        <updated>2019-10-31T07:05:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="git-简要指南">Git - 简要指南</h1>
<hr>
<blockquote>
<p>参数：</p>
<ul>
<li><strong>username:</strong>    用户名</li>
<li><strong>email:</strong>    邮箱</li>
<li><strong>repo:</strong>    Git 仓库</li>
<li><strong>branch:</strong>    分支</li>
<li><strong>directory:</strong>    本地目录</li>
<li><strong>filename:</strong>    文件名</li>
</ul>
</blockquote>
<h3 id="创建新仓库">创建新仓库</h3>
<blockquote>
<p>创建新文件夹并打开</p>
</blockquote>
<pre><code class="language-shell">git init
</code></pre>
<h3 id="配置仓库">配置仓库</h3>
<blockquote>
<p>全局设置（已配置忽略）</p>
</blockquote>
<pre><code class="language-shell">git config --global user.name '&lt;username&gt;'
git config --global user.email '&lt;email&gt;'
</code></pre>
<blockquote>
<p>关联远程仓库</p>
</blockquote>
<pre><code class="language-shell">git remote add origin &lt;repo&gt;
</code></pre>
<blockquote>
<p>删除关联仓库</p>
</blockquote>
<pre><code class="language-shell">git remote remove origin
</code></pre>
<h3 id="检出仓库">检出仓库</h3>
<blockquote>
<p>执行如下命令以创建一个本地仓库的克隆版本：</p>
</blockquote>
<pre><code class="language-shell">git clone &lt;directory&gt;
</code></pre>
<blockquote>
<p>如果是远端服务器上的仓库，你的命令会是这个样子：</p>
</blockquote>
<pre><code class="language-shell">git clone &lt;repo&gt;
</code></pre>
<h3 id="工作流">工作流</h3>
<blockquote>
<p><code>工作区</code>：是你的工作目录，它持有实际文件</p>
<p><code>暂存区（Index）</code>：它像个缓存区域，临时保存你的改动</p>
<p><code>HEAD</code>：它指向你最后一次提交的结果</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://AnCIity.github.io/post-images/1572505828915.jpg" alt=""></figure>
<h3 id="添加和提交">添加和提交</h3>
<blockquote>
<p>添加到暂存区<code>index</code></p>
</blockquote>
<pre><code class="language-shell">git add &lt;filename&gt;
git add *
</code></pre>
<blockquote>
<p>提交改动至本地仓库<code>HEAD</code></p>
</blockquote>
<pre><code class="language-shell">git commit -m &quot;代码提交信息&quot;
</code></pre>
<h3 id="推送改动">推送改动</h3>
<blockquote>
<p>提交到远程仓库</p>
</blockquote>
<pre><code class="language-shell">git push origin &lt;branch&gt;
</code></pre>
<blockquote>
<p>项目已存在</p>
<p>需先获取远程库与本地同步合并</p>
</blockquote>
<pre><code class="language-shell">git pull --rebase origin &lt;branch&gt;
</code></pre>
<h3 id="分支">分支</h3>
<blockquote>
<p>创建分支</p>
</blockquote>
<pre><code class="language-shell">git branch
</code></pre>
<blockquote>
<p>删除分支</p>
</blockquote>
<pre><code class="language-shell">git branch -d &lt;branch&gt;
</code></pre>
<blockquote>
<p>查看分支</p>
</blockquote>
<pre><code class="language-shell">git branch # 本地
git branch -r # 远程
git branch -a # 所有
</code></pre>
<blockquote>
<p>切换分支</p>
</blockquote>
<pre><code class="language-shell">git checkout &lt;branch&gt;
</code></pre>
<blockquote>
<p>推送分支</p>
</blockquote>
<pre><code class="language-shell">git push origin &lt;branch&gt;
</code></pre>
<h3 id="更新与合并">更新与合并</h3>
<blockquote>
<p>更新本地仓库至最新改动</p>
</blockquote>
<pre><code class="language-shell">git pull
</code></pre>
<blockquote>
<p>获取远程库与本地同步合并</p>
</blockquote>
<pre><code class="language-shell">git pull --rebase origin &lt;branch&gt;
</code></pre>
<blockquote>
<p>合并其他分支到你的当前分支</p>
</blockquote>
<pre><code class="language-shell">git merge &lt;branch&gt;
</code></pre>
<blockquote>
<p>手动合并冲突</p>
</blockquote>
<pre><code class="language-shell">git add &lt;filename&gt;
</code></pre>
<blockquote>
<p>预览差异</p>
</blockquote>
<pre><code class="language-shell">git diff &lt;source_branch&gt; &lt;target_branch&gt; # 原分支 目标分支
</code></pre>
<h3 id="实用小贴士">实用小贴士</h3>
<blockquote>
<p>内建的图形化 Git</p>
</blockquote>
<pre><code class="language-shell">gitk
</code></pre>
<blockquote>
<p>彩色的 git 输出</p>
</blockquote>
<pre><code class="language-shell">git config color.ui true
</code></pre>
<blockquote>
<p>显示历史记录时，每个提交的信息只显示一行</p>
</blockquote>
<pre><code class="language-shell">git config format.pretty oneline
</code></pre>
<blockquote>
<p>交互式添加文件到暂存区</p>
</blockquote>
<pre><code class="language-shell">git add -i
</code></pre>
<h3 id="常用命令速查表">常用命令速查表</h3>
<figure data-type="image" tabindex="2"><img src="https://AnCIity.github.io/post-images/1572505842313.png" alt=""></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue - Api接口模块化]]></title>
        <id>https://AnCIity.github.io/post/vue-api-module</id>
        <link href="https://AnCIity.github.io/post/vue-api-module">
        </link>
        <updated>2019-10-31T05:53:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="文件介绍">文件介绍</h3>
<p>了解并新建以下目录文件</p>
<blockquote>
<p><code>@apis</code> api管理文件夹</p>
<p><code>@apis/index.js</code> api接口的通一出口</p>
<p><code>@apis/base.js</code> 接口域名管理</p>
<p><code>@apis/xxx.js</code> 更多接口模块</p>
<p><code>@apis/filing.js</code> 示例接口模块 用于定义filing模块接口列表</p>
</blockquote>
<h3 id="index">index</h3>
<pre><code class="language-js">/**
* @author City
* @description api接口的通一出口
*/

//  导出接口
//  归档模块接口
import filing from '@/apis/filing'



//  导出接口
export default{
    filing
}
</code></pre>
<h3 id="base">base</h3>
<pre><code class="language-js">/**
 * @author City
 * @description 接口域名管理
 */


const base = {
    anLink: '/api'
}


 export default base;
</code></pre>
<h3 id="filing">filing</h3>
<pre><code class="language-js">/**
* @author City
* @description filing模块接口列表
*/

import base from './base'; // 导入接口域名列表
import axios from '@/utils/http' // 导入http中创建的axios实例
import qs from 'qs' // 根据需求导入qs模块，序列化post数据

const filing = {
    // 归档菜单
    Menu () {
        return axios.get(`${base.anLink}/menu`);
    },
    // 归档列表
    List () {
        return axios.get(`${base.anLink}/list`)
    }
    // 新闻详情,演示    
    // articleDetail (id, params) {        
    //     return axios.get(`${base.sq}/topic/${id}`, {            
    //         params: params        
    //     });    
    // },
    // // post提交    
    // login (params) {        
    //     return axios.post(`${base.sq}/accesstoken`, qs.stringify(params));    
    // }

}


export default filing;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue - 封装axios]]></title>
        <id>https://AnCIity.github.io/post/vue-package-axios</id>
        <link href="https://AnCIity.github.io/post/vue-package-axios">
        </link>
        <updated>2019-10-26T13:17:23.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>新建目录文件：</p>
<p>@/utils/http.js</p>
</blockquote>
<pre><code class="language-js">/**
* @author City
* @description axios封装，请求拦截、响应拦截、错误统一处理
*/

import axios from 'axios';

// 创建axios实例
const instance = axios.create();
// 设置post请求头
instance.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';


// 添加请求拦截器
axios.interceptors.request.use(function (config) {
    // 在发送请求之前做些什么
    return config;
  }, function (error) {
    // 对请求错误做些什么
    return Promise.reject(error);
  });


// 添加响应拦截器
axios.interceptors.response.use(function (response) {
    // 对响应数据做点什么
    return response;
  }, function (error) {
    // 对响应错误做点什么
    return Promise.reject(error);
  });


export default instance;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[个人简历]]></title>
        <id>https://AnCIity.github.io/post/about</id>
        <link href="https://AnCIity.github.io/post/about">
        </link>
        <updated>2019-01-25T11:09:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="个人信息">个人信息</h3>
<hr>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th>值</th>
<th>属性</th>
<th style="text-align:left">值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">姓名</td>
<td>章健</td>
<td>性别</td>
<td style="text-align:left">男</td>
</tr>
<tr>
<td style="text-align:left">年龄</td>
<td>21</td>
<td>学历</td>
<td style="text-align:left">大专</td>
</tr>
<tr>
<td style="text-align:left">专业</td>
<td>Java</td>
<td>大学</td>
<td style="text-align:left">江西软件职业技术大学</td>
</tr>
<tr>
<td style="text-align:left">邮箱</td>
<td>city@nanzc.com</td>
<td>意向职位</td>
<td style="text-align:left">Web前端工程师</td>
</tr>
</tbody>
</table>
<p>源于高中学习一年多的美术，受此影响我选择了学习Web前端。</p>
<p>喜欢研究前沿技术，熟练使用<strong>markdown</strong>记录项目与学习过程。</p>
<p>积极向上，做事脚踏实地，有良好的解决问题、沟通和学习能力。</p>
<h3 id="技术栈与工具">技术栈与工具</h3>
<hr>
<ul>
<li>基础：<strong>JavaScript / ES6 / HTML5 / CSS3 / Less / Webpack / HTTP</strong></li>
<li>框架：<strong>Vue（掌握）/ React（了解）</strong></li>
<li>UI：<strong>Element</strong> / <strong>uni-app</strong> / <strong>Vant</strong></li>
<li>后端：Node / Python / Java / PHP / MySQL / SQLite</li>
<li>工具：Win10 / Deepin / VS code  / HBuilderX / Chrome / Git</li>
</ul>
<h3 id="技术分享">技术分享</h3>
<hr>
<p><strong>GitHub</strong>：https://github.com/anciity/</p>
<p><strong>个人博客</strong>：https://nanzc.com/ （anciity.github.io）</p>
<ul>
<li>博客由 <strong>GitHub Pages</strong> + 静态博客系统 <strong>Gridea</strong> + 评论插件 <strong>Gitalk</strong> 搭建而成。</li>
<li>由于国内访问GitHub Pages不是很理想，于是使用内容分发 <strong>CDN</strong> 进行访问加速。</li>
</ul>
<h3 id="项目经验">项目经验</h3>
<hr>
<p><strong>1. 博客系统</strong> （PC 和 移动端适配）</p>
<ul>
<li>前端页面皆为 <strong>自行设计</strong> ，域名配置、服务器部署、文档编写等工作都是 <strong>自己完成</strong>。</li>
<li>前端通过 <strong>axios</strong> 跨域请求至本地使用 <strong>Mock.js</strong> mock好的数据。</li>
<li>前端采用了 <strong>Vue + Element</strong> ，后端采用了 <strong>Python + Flask + MySQL</strong>。</li>
<li>使用媒体查询进行 <strong>移动端适配</strong> ，使用卡片式以及过度效果等，提升用户 <strong>交互体验</strong>。</li>
<li>使用 <strong>字蛛</strong> 提取自定义字体中网站使用字符，以压缩字体文件，提升用户 <strong>访问速度</strong>。</li>
</ul>
<p><strong>2. 登录模板</strong> （PC）</p>
<ul>
<li>前端采用 <strong>canvas</strong> 绘制粒子特效，配合雪景图给人以雪感。</li>
<li>后端使用 <strong>PHP</strong> ，结构分为header、container、footer三层。</li>
</ul>
]]></content>
    </entry>
</feed>